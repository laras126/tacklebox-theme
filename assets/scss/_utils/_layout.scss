$size-base:    1.2rem;

/// @group breakpoints

$screen-sm:     40em;
$screen-md:     50em;
$screen-lg:   	50em;
$screen-xl:     53em;


/// @group base styles

* {
    box-sizing: border-box;
}

img {
    max-width: 100%;
}

.site-main,
.contain-xl {
    margin-left: auto;
	margin-right: auto;
	max-width: $screen-xl;
}


/// @group grid main
/// @link http://philipwalton.github.io/solved-by-flexbox/demos/grids/

.grid {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
}

@include bp(sm) {
    .grid-sm {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
    }
}

.grid--guttered {
	margin: -$size-base/2;

	> .cell {
		padding: $size-base/2;
	}
}
	
.cell {
  	flex: 1;
    position: relative;
}


/// @group alignment

$directions: (
    top: flex-start,
    bottom: flex-end,
    center: center
);

@each $name, $dir in $directions {  
    .grid--#{$name} {
        align-items: $dir;
    }
  
    .cell--#{$name} {
        align-self: $dir;
    }
}




/// @group sizes

$sizes: (
    full:   100%,
    half: 	50%,
    third:	33.333333%,
    fourth:	25%,
    sixth:	16.66666667%
);

@each $name, $size in $sizes {  
    .cell--#{$name} {
   		flex: 0 0 $size;
    }

    .grid--#{$name} > .cell {
   		flex: 0 0 $size;
    }

    @include bp(sm) {
        .cell-sm--#{$name} {
            flex: 0 0 $size;
        }
        .grid-sm--#{$name} > .cell {
            flex: 0 0 $size;
        }
    }

    @include bp(md) {
        .cell-md--#{$name} {
            flex: 0 0 $size;
        }
        .grid-md--#{$name} > .cell {
            flex: 0 0 $size;
        }
    }

}






/// @group squish
/// Squish allows for hanging elements on the right or left

.squish {
	padding-left: $size-base;
	padding-right: $size-base;
}

.squish-l {
	padding-left: $size-base;
}

.squish-r {
	padding-right: $size-base;
}

@include bp(sm) {
	.squish {
        padding: 0;
		margin-left: 16.66666667%;
		margin-right: 16.66666667%;
	}

	.squish-l {
        padding: 0;
		margin-left: 16.66666667%;
	}

	.squish-r {
        padding: 0;
		margin-left: 16.66666667%;
	}
}



/// @group bleeds
/// @content [Bleed an element slightly out of its container.]

@mixin bleed($size: $size-base) {
	@include bp(md) {
		margin-right: -$size-base;
	    margin-left: -$size-base;
	}
}

.bleed {
	@include bleed;
}





